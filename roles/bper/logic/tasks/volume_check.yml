##########################################################################
#
# - check for existing volumes and generate new volume name incremented by 1
# 
#
# 
# Alexey Mikhaylov
# NetApp Deutschland GmbH
# Professional Services 2024
##########################################################################
---
- name: "Volume existance check"
  block:
    - name: Set cluster credentials
      ansible.builtin.set_fact:
        auth: &auth
          hostname:        "{{ svm.cluster_mgmt | default(omit) }}"
          username:        "{{ ontap_username | default(omit) }}"
          password:        "{{ ontap_password | default(omit) }}"
          validate_certs:  "{{ auth_rest_validate_certs | default(false) }}"
          use_rest:        always
          use_python_keys: true
      no_log: true

    - name: Reducing inventory for volume lookup 
      ansible.builtin.set_fact:
        reduced_inventory: "{{ reduced_hosts | default([]) + [{'cluster_mgmt': item.cluster_mgmt}] }}"
      loop: "{{ inventory_svms_mcc.hosts }}"

    #- debug: var=reduced_inventory
    
    - name: Collecting existing volumes on all clusters against volume "{{ vars_local.source.volume.name | default('None') }}"
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        gather_subset:
          - volume_info
        parameters:
          name: "{{ vars_local.source.volume.name[:-2] }}*"
        fields:
          - name
        hostname: "{{ svm.cluster_mgmt }}"
      register: existing_vols
      loop: "{{ reduced_inventory | unique}}"
      loop_control:
        loop_var: svm

######### name!
    - name: Set existing volumes list
      ansible.builtin.set_fact:
        existing_volumes_list: "{{ existing_volumes_list | default([]) + item.ontap_info.storage_volumes.records | map(attribute='name') | list | sort}}"
      loop: "{{ existing_vols.results }}"

    - name: Set new volume name
      ansible.builtin.set_fact:
        new_volume_name: "{{ existing_volumes_list | increment_names(1) }}"
     
    - name: Define incremented volume name specification
      ansible.builtin.set_fact:
        vars_local_update:
          source:
            volume:
              name:          "{{ new_volume_name | default(vars_local.source.volume.name) }}"
              junction_path: "/{{ new_volume_name | default(vars_local.source.volume.name) }}"
            export_policy:
              name:          "Q_{{ new_volume_name | default(vars_local.source.volume.name) }}"
            qtree:
              name:          "Q_{{ new_volume_name | default(vars_local.source.volume.name) }}"
          snapmirror:
            destination:
              volume:
                name:        "{{ new_volume_name | default(vars_local.source.volume.name) }}_vault"
          destination:
            volume:
              name:          "{{ new_volume_name | default(vars_local.source.volume.name) }}_vault"
      when: existing_volumes_list | length > 0
    
    - name: Merging logic found facts with vars_local
      ansible.builtin.set_fact:
        vars_local: "{{ vars_local | default({}) | combine(vars_local_update, recursive=true)}}"
      when: existing_volumes_list | length > 0
    
  when: inventory_svms_mcc.keys() | length > 0
...