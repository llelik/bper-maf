##########################################################################
#
# - check for existing volumes and generate new volume name incremented by 1
# 
#
# 
# Alexey Mikhaylov
# NetApp Deutschland GmbH
# Professional Services 2024
##########################################################################
---
- name: Volume existance check
  block:
    - name: Set cluster credentials 
      ansible.builtin.set_fact:
        auth: &auth
          #hostname:        "{{ svm.cluster_mgmt | default(omit) }}"
          username:        "{{ ontap_username | default(omit) }}"
          password:        "{{ ontap_password | default(omit) }}"
          validate_certs:  "{{ auth_rest_validate_certs | default(false) }}"
          use_rest:        always
          use_python_keys: true
      no_log: true

    - name: Reducing inventory for volume lookup 
      ansible.builtin.set_fact:
        reduced_inventory: "{{ reduced_hosts | default([]) + [{'cluster_mgmt': item.cluster_mgmt}] }}"
      loop: "{{ inventory_svms_mcc.hosts }}"

    - name: Pre-flight availability check - primary storage inventory
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        gather_subset:
          - vserver_info
        parameters:
          name: "{{ svm.name }}*"
        fields:
          - name
        hostname: "{{ svm.cluster_mgmt }}"
      register: svm_check
      loop: "{{ inventory_svms_mcc.hosts }}"
      loop_control:
        loop_var: svm
      no_log: "{{ nolog }}"
    
    - name: Check primary SVMs
      ansible.builtin.assert:
        that:
          - inventory_item.ontap_info.svm_svms.num_records > 0
        msg: "SVM {{ inventory_item.svm.name }} not found on the cluster {{ inventory_item.svm.cluster_name }}. Please check primary storage inventory file and ONTAP cluster configuration."
        quiet: true
      loop: "{{ svm_check.results }}"
      loop_control:
        loop_var: inventory_item
    
    - name: Pre-flight availability check - secondary storage inventory
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        gather_subset:
          - vserver_info
        parameters:
          name: "{{ svm.name }}*"
        fields:
          - name
        hostname: "{{ svm.cluster_mgmt }}"
      register: svm_check
      loop: "{{ inventory_svms_vault.hosts }}"
      loop_control:
        loop_var: svm
      no_log: "{{ nolog }}"

    - name: Check secondary SVMs
      ansible.builtin.assert:
        that:
          - inventory_item.ontap_info.svm_svms.num_records > 0
        msg: "SVM {{ inventory_item.svm.name }} not found on the cluster {{ inventory_item.svm.cluster_name }}. Please check primary storage inventory file and ONTAP cluster configuration."
        quiet: true
      loop: "{{ svm_check.results }}"
      loop_control:
        loop_var: inventory_item
    #- debug: var=svm_check
    #- fail: msg=STOP
######### Incrementing volume name by 1
# We retrieve existing volumes with generated name pattern without last 2 digits
# This should give a list of volumes named vol01,vol02,vol03 etc. (filetr=vol*)
# We then increment the last 2 digits by 1
#######################################
    - name: Collecting existing volumes on all clusters against volume "{{ vars_local.source.volume.name | default('None') }}"
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        gather_subset:
          - volume_info
        parameters:
          name: "{{ vars_local.source.volume.name[:-2] }}*"
        fields:
          - name
        hostname: "{{ svm.cluster_mgmt }}"
      register: existing_vols
      loop: "{{ reduced_inventory | unique}}"
      loop_control:
        loop_var: svm
      no_log: "{{ nolog }}"

######### Incrementing volume name by 1 cont.
# We build a list of volumes if received
# sort them and take the last one
# if return empty list if no volumes found by the pattern
#######################################
    - name: Set existing volumes list
      ansible.builtin.set_fact:
        existing_volumes_list: "{{ existing_volumes_list | default([]) + item.ontap_info.storage_volumes.records | map(attribute='name') | list | sort}}"
      loop: "{{ existing_vols.results }}"
      no_log: "{{ nolog }}"

######### Incrementing volume name by 1 cont.
# Inceremting the last volume name by 1
# if list is empty we return empty var
#######################################
    - name: Set new volume name
      ansible.builtin.set_fact:
        new_volume_name: "{{ existing_volumes_list | increment_names(1) }}"

######### Incrementing volume name by 1 cont.
# if list was empty - new_volume_name is set to None 
# then we use default volume name vol01, qtree and exp policy (from defaults)
# also generate qtree, exp policy names accodingly if needed
#######################################
    - name: Define incremented volume name specification
      ansible.builtin.set_fact:
        vars_local_update:
          source:
            volume:
              name:          "{{ new_volume_name | default(vars_local.source.volume.name) }}"
              junction_path: "/{{ new_volume_name | default(vars_local.source.volume.name) }}"
            export_policy:
              name:          "Q_{{ new_volume_name | default(vars_local.source.volume.name) }}"
            qtree:
              name:          "Q_{{ new_volume_name | default(vars_local.source.volume.name) }}"
          snapmirror:
            destination:
              volume:
                name:        "{{ new_volume_name | default(vars_local.source.volume.name) }}_vault"
          destination:
            volume:
              name:          "{{ new_volume_name | default(vars_local.source.volume.name) }}_vault"
      when: existing_volumes_list | length > 0
    
    - name: Merging logic found facts with vars_local
      ansible.builtin.set_fact:
        vars_local: "{{ vars_local | default({}) | combine(vars_local_update, recursive=true)}}"
      when: existing_volumes_list | length > 0
    
  when: inventory_svms_mcc.keys() | length > 0
...