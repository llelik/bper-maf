---
- name: Set naming facts - Assign everything
  no_log: true
  ansible.builtin.set_fact:
    # the next 2 lines are for the certificate based authentication
    # we assume the certificate is in the format of clustername___username (with .key and .ctr extensions)
    netapp_api_certificate_base: "{{ playbook_dir }}/{{ vars_defaults.config.api_certificate_folder | default('api_certificates') }}/{{ cluster.name | default('') }}___{{ vars_defaults.config.api_username | default('api_user') }}"
    netapp_api_use_certificate : "{{ vars_defaults.config.api_use_certificate           | default(false) }}"
    netapp_hostname            : "{{ cluster.management_ip  | default(ansible_host) }}"
    netapp_username            : "{{ ontap_username }}"
    netapp_password            : "{{ ontap_password }}"

  # here we set the authentication object (can be user/pw or certificate)
- name: Set naming facts - authentication
  no_log: true
  ansible.builtin.set_fact:
    auth_rest: "{{ netapp_hostname | auth_rest(netapp_username,netapp_password,netapp_api_certificate_base,netapp_api_use_certificate) }}"

- ansible.builtin.set_fact:
    auth: &auth
      #hostname: "{{ auth_rest.hostname | default(omit) }}"
      username: "{{ auth_rest.username | default(omit) }}"
      password: "{{ auth_rest.password | default(omit) }}"
      key_filepath: "{{ auth_rest.key_filepath | default(omit) }}"
      cert_filepath: "{{ auth_rest.cert_filepath | default(omit) }}"
      validate_certs: "{{ auth_rest_validate_certs | default(false) }}"
      use_rest: always
  no_log: "{{ nolog }}"

- name: Get vars
  ansible.builtin.set_fact:
    src_cluster: "{{ 'cluster'  | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_svm:     "{{ 'svm'      | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_volume:  "{{ 'volume'   | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_qtree:   "{{ 'qtree'    | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_e_policy: "{{ 'export_policy' | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    dst_volume:  "{{ 'volume'   | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='destination') }}"
    dst_svm:     "{{ 'svm'      | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='destination') }}"
    dst_cluster: "{{ 'cluster'  | merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='destination') }}"
  no_log: "{{ nolog }}"

# - debug:
#     msg: 
#       - "SRC cls:   {{ src_cluster.name }}"
#       - "SRC svm:   {{ src_svm.name }}"
#       - "SRC vol:   {{ src_volume.name }}"
#       - "SRC qtree: {{ src_qtree.name }}"
#       - "SRC e-pol: {{ src_e_policy.name }}"
#       - ""
#       - "DST cls:   {{ dst_cluster.name }}"
#       - "DST svm:   {{ dst_svm.name }}"
#       - "DST vol:   {{ dst_volume.name }}"
#   when: 1 == 0
      

- name: "Tests: Collect source cluster info - qtree"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - qtree_info
    parameters:
      name: "{{ src_qtree.name }}"
      volume.name: "{{ src_volume.name }}"
    hostname: "{{ src_cluster.management_ip }}"
  register: src_qt_info
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - volume"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - volume_info
    parameters:
      name: "{{ src_volume.name }}"
    hostname: "{{ src_cluster.management_ip }}"
  register: src_vol_info
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - Export policy"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - export_policy_info
    parameters:
      name: "{{ src_e_policy.name }}"
    hostname: "{{ src_cluster.management_ip }}"
  register: src_ep_info
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - dest volume"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - volume_info
    parameters:
      name: "{{ dst_volume.name }}"
    hostname: "{{ dst_cluster.management_ip }}"
  register: dst_vol_info
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - snapmirror"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - snapmirror_info
    fields:
      - state
    parameters:
      source.path:      "{{ src_svm.name }}:{{ src_volume.name }}"
      destination.path: "{{ dst_svm.name }}:{{ dst_volume.name }}"
    hostname: "{{ dst_cluster.management_ip }}"
  register: sm_info
  no_log: "{{ nolog }}"

- ansible.builtin.assert:
    that:
      - src_qt_info.ontap_info.storage_qtrees.num_records == 1
      - src_vol_info.ontap_info.storage_volumes.num_records == 1
      - src_ep_info.ontap_info.protocols_nfs_export_policies.num_records == 1
      - dst_vol_info.ontap_info.storage_volumes.num_records == 1
      - sm_info.ontap_info.snapmirror_relationships.num_records == 1
      - sm_info.ontap_info.snapmirror_relationships.records[0].state in ['snapmirrored', 'initializing', 'transferring']
    msg: "One or more of the required objects not found on the source or destination cluster. Please check the configuration."





