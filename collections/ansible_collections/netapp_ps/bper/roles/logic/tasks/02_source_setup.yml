##########################################################################
#
# - find suitable SVM for the volume
# 
#
# 
# Alexey Mikhaylov
# NetApp Deutschland GmbH
# Professional Services 2024
##########################################################################

---
- name: "Source SVM finder"
  block:
    - name: Set cluster credentials
      ansible.builtin.set_fact:
        auth: &auth
          username:        "{{ ontap_username | default(omit) }}"
          password:        "{{ ontap_password | default(omit) }}"
          validate_certs:  "{{ auth_rest_validate_certs | default(false) }}"
          use_rest:        always
      no_log: true

######## Setting source volume destination aggreate
# Collecting aggrgates available 
# of the given Snaplock type across the inventory
#######################################
    - name: "Find best aggregate 0" 
      netapp_ps.ontap.get_best_aggr_selective:
        hostname_list:               "{{ inventory_svms_mcc.hosts | map(attribute='cluster_mgmt') | list | unique}}"
        <<: *auth
        svm_name:                    ""
        debug:                       True
        size_mb:                     "{{ vars_local.source.volume.size | default(0) }}"
        weight_volume_count_node:    0
        weight_used_pct:             0
        weight_provisioned_pct:      0
        weight_available_space:      1
        threshold_volume_count_node: 480
        threshold_volume_count:      180
        features:
          - feature: snaplock_type
            type: "{{ '!non_snaplock' if input_snaplock | bool else vars_local.source.volume.snaplock.type }}"
      register: aggr_lookup

    - debug: var=aggr_lookup
    - debug:
        msg:
          - "Best aggregate cluster is {{ aggr_lookup.aggregate.cluster_mgmt_ip }}"
          - "Best aggregate is {{ aggr_lookup.aggregate.name }}"

    - debug: var=aggr_lookup.summary 

    - name: Set the list of SVMs with access on best aggregate
      set_fact:
        target_svms_list: "{{ inventory_svms_mcc.hosts | selectattr('cluster_mgmt', '==', aggr_lookup.aggregate.cluster_mgmt_ip) | map(attribute='name') | list }}"

    - debug: var=target_svms_list

    - name: Check if we have SVMs available for selected aggregate
      ansible.builtin.assert:
        that:
          - target_svms_list | length > 0
        msg: "No SVMs found for the best aggregate. Exiting. Check SVM configuration."

    ########## Collecting volume count for all source candidate SVMs
    # across the list of clusters with aggregates of supported type
    - name: Get volume count for all source candidate SVMs
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        use_python_keys: true
        gather_subset:
          - volume_info
        parameters:
          svm.name: "{{ svm }}"
        fields:
          - name
        hostname: "{{ aggr_lookup.aggregate.cluster_mgmt_ip }}"
      register: svms_volcount
      loop: "{{ target_svms_list }}"
      loop_control:
        loop_var: svm
        label: svm
      no_log: false #"{{ nolog }}"
     

    ########## Building a list of source SVMs with volume count and it's hosting cluster to sort
    - name: Collect volume count on source SVMs
      ansible.builtin.set_fact:
        data_svm_volcount_list: "{{ data_svm_volcount_list | default([]) + [ {
        'name':         svm.svm,
        'count':        svm.ontap_info.storage_volumes.num_records      
        } ] }}"
      loop: "{{ svms_volcount.results }}"
      loop_control:
        loop_var: svm
        label: svm
      no_log: false #"{{ nolog }}"
      when:
        - svm.ontap_info is defined

    - name: Define most suiting source SVM details by vol count
      ansible.builtin.set_fact:
        target_svm: "{{ data_svm_volcount_list | sort(attribute='count') | first }}"

    - name: Defining target source SVM - vars_local facts
      ansible.builtin.set_fact:
        vars_local_update:
          source:
            svm:
              name:          "{{ target_svm.name }}"
            cluster:
              name:          "{{ inventory_svms_mcc.hosts | selectattr('name', '==', target_svm.name) | map(attribute='cluster_name') }}"
              management_ip: "{{ aggr_lookup.aggregate.cluster_mgmt_ip }}"
            volume:
              aggregate_name: "{{ aggr_lookup.aggregate.name }}"

    - name: Merging logic local facts with vars_local
      ansible.builtin.set_fact:
        vars_local: "{{ vars_local | default({}) | combine(vars_local_update, recursive=true)}}"

    ###################### DEBUG
    - debug: var=vars_local
    #- fail: msg=STOP

    ###################### END DEBUG


  when: inventory_svms_mcc.keys() | length > 0
...